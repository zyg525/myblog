(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{395:function(s,a,t){"use strict";t.r(a);var n=t(4),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[s._v("#")]),s._v(" 数据类型")]),s._v(" "),a("h3",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),a("p",[s._v("Java的数据类型分为基本数据类型和引用数据类型。基本数据类型包括"),a("code",[s._v("byte、short、char、int、long、float、double、boolean")]),s._v("八种，它们所占的字节数分别是"),a("code",[s._v("1、2、2、4、8、4、8、4")]),s._v("，一个字节占8位二进制。")]),s._v(" "),a("p",[s._v("基本数据类型以外的都是引用数据类型，比如通常意义上的对象。")]),s._v(" "),a("h3",{attrs:{id:"基本类型的表示范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本类型的表示范围"}},[s._v("#")]),s._v(" 基本类型的表示范围")]),s._v(" "),a("p",[s._v("如果不考虑负数，那么对于"),a("code",[s._v("int")]),s._v("类型来说，"),a("strong",[s._v("它的范围是"),a("code",[s._v("[0, 2^32-1]")])]),s._v("，其它基本类型也是一样的算法。")]),s._v(" "),a("p",[s._v("如果考虑负数，由于计算机中用最高位表示正负号，1代表负号，0代表正号，对于"),a("code",[s._v("int")]),s._v("类型，理论范围是"),a("code",[s._v("[-(2^31-1), 2^31-1]")]),s._v("；又由于计算机使用补码表示数字，补码的特点是"),a("code",[s._v("+0")]),s._v("和"),a("code",[s._v("-0")]),s._v("的二进制形式完全一样，只需要占用一个位置，而在原码或反码中，"),a("code",[s._v("+0")]),s._v("和"),a("code",[s._v("-0")]),s._v("要占用两个位置，因此在补码中可以省出来一个位置，用于存放最小的负数。"),a("strong",[s._v("所以"),a("code",[s._v("int")]),s._v("类型的实际范围是"),a("code",[s._v("[-2^31, 2^31-1]")])]),s._v("，对应的二进制补码是"),a("code",[s._v("10...00(32bits)")]),s._v("~"),a("code",[s._v("01...11(32bits)")]),s._v("。其它基本类型也是一样的算法。")]),s._v(" "),a("h3",{attrs:{id:"浮点类型的表示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浮点类型的表示"}},[s._v("#")]),s._v(" 浮点类型的表示")]),s._v(" "),a("p",[a("code",[s._v("float")]),s._v("和"),a("code",[s._v("double")]),s._v("属于浮点类型，在定义浮点类型变量时，最好在数值后面加上"),a("code",[s._v("f")]),s._v("或者"),a("code",[s._v("d")]),s._v("，以显式声明它的具体浮点类型，否则默认是"),a("code",[s._v("double")]),s._v("类型。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),s._v(" f "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//编译报错")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//编译通过")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),s._v(" f "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.2f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//规范写法")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[s._v("#")]),s._v(" 常量")]),s._v(" "),a("p",[s._v("被"),a("code",[s._v("final")]),s._v("修饰的变量就是常量，常量在定义之后就不能再赋值。常量的一个作用是避免出现"),a("strong",[s._v("魔法数字")]),s._v("，比如要使用圆周率3.14，可以将它赋值给一个常量，常量名通常是大写的、有意义的，这样在程序中使用圆周率时只需要引用常量即可，避免出错。")]),s._v(" "),a("h3",{attrs:{id:"运算时类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算时类型转换"}},[s._v("#")]),s._v(" 运算时类型转换")]),s._v(" "),a("p",[a("code",[s._v("byte、short、char")]),s._v("类型变量在运算时，会先转换成"),a("code",[s._v("int")]),s._v("类型，然后再进行运算。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//编译报错，因为返回的是int类型")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"运算规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算规则"}},[s._v("#")]),s._v(" 运算规则")]),s._v(" "),a("p",[s._v("计算机内部是通过补码进行运算的。")]),s._v(" "),a("h3",{attrs:{id:"整数运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整数运算"}},[s._v("#")]),s._v(" 整数运算")]),s._v(" "),a("ul",[a("li",[a("h4",{attrs:{id:"除法和取余"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#除法和取余"}},[s._v("#")]),s._v(" 除法和取余")])])]),s._v(" "),a("p",[s._v("整数之间进行除法，结果取整。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//结果是3")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("整数取余：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//结果是1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[a("h4",{attrs:{id:"自增自减"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自增自减"}},[s._v("#")]),s._v(" 自增自减")])])]),s._v(" "),a("p",[a("code",[s._v("++i")]),s._v("表示先自增再赋值，"),a("code",[s._v("i++")]),s._v("表示先赋值再自增。"),a("code",[s._v("--i")]),s._v("和"),a("code",[s._v("i--")]),s._v("也是一样的。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//c赋值为10，然后a自增为11")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//b自增为11，然后d赋值为11")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[a("h4",{attrs:{id:"移位运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#移位运算"}},[s._v("#")]),s._v(" 移位运算")])])]),s._v(" "),a("p",[s._v("只有整数能进行移位运算。移位运算包括左移、右移、无符号右移。")]),s._v(" "),a("p",[s._v("左移的计算过程是，先将整数转换为二进制补码，然后将补码的数值位向左移动n位(符号位不变)，低位补0，得到一个新的补码，这个新补码对应的原码就是最终的结果。"),a("strong",[s._v("快捷的计算方法是，无论是正数负数，左移几位就是乘以2的几次方，符号不变")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//结果是4")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("右移的计算过程是，先将整数转换为二进制补码，然后将补码的数值位向右移动n位(符号位不变)，如果是负数则高位补1，如果是正数则高位补0，得到一个新的补码，这个新补码对应的原码就是最终的结果。"),a("strong",[s._v("快捷的计算方法是，无论是正数负数，右移几位就是除以2的几次方，符号不变")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//结果是-2")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("无符号右移的计算过程是，先将整数转换为二进制补码，然后将补码的符号位和数值位向右移动n位，高位补0，得到一个新的补码，这个新补码对应的原码就是最终的结果，由于高位补0，所以结果肯定是正数。"),a("strong",[s._v("快捷的计算方法是，如果是正数，那么右移几位就是除以2的几次方，如果是负数，就需要通过补码进行计算了。")])]),s._v(" "),a("p",[a("strong",[s._v("无符号的意思就是，符号位不作保留，和数值位一起移动。")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//结果是2^31-1，原因是符号位被移动了")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[a("h4",{attrs:{id:"位运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位运算"}},[s._v("#")]),s._v(" 位运算")])])]),s._v(" "),a("p",[s._v("只有整数能进行位运算。位运算包括按位与、按位或、按位异或、按位非。")]),s._v(" "),a("p",[a("strong",[s._v("按位与")]),s._v("("),a("code",[s._v("&")]),s._v(")的计算过程是，先将整数转换为二进制补码，然后对补码进行按位运算，相同位都为1则为1，否则为0(包括符号位)，得到一个新的补码，这个新补码对应的原码就是最终的结果。"),a("strong",[s._v("快捷的计算方法是，直接用对原码进行按位计算。")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//结果是2，(0,110)原 & (0,010)原 = (0,010)原 = 2")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("按位或")]),s._v("("),a("code",[s._v("|")]),s._v(")的计算过程是，先将整数转换为二进制补码，然后对补码进行按位运算，相同位都为0则为0，否则为1(包括符号位)，得到一个新的补码，这个新补码对应的原码就是最终的结果。"),a("strong",[s._v("快捷的计算方法是，直接用对原码进行按位计算。")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//结果是6，(0,110)原 | (0,010)原 = (0,110)原 = 6")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("按位异或")]),s._v("("),a("code",[s._v("^")]),s._v(")的计算过程是，先将整数转换为二进制补码，然后对补码进行按位运算，相同位都为0或都为1则为0，否则为1，得到一个新的补码，这个新补码对应的原码就是最终的结果。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//结果是-8")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("按位非")]),s._v("("),a("code",[s._v("~")]),s._v(")的计算过程是，先将整数转换为二进制补码，然后对补码按位取反(包括符号位)，得到一个新的补码，这个新补码对应的原码就是最终的结果。"),a("strong",[s._v("快捷的计算方法是，"),a("code",[s._v("~(A) = -(A+1)")]),s._v("。")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//结果是-7")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"浮点数运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浮点数运算"}},[s._v("#")]),s._v(" 浮点数运算")]),s._v(" "),a("ul",[a("li",[a("h4",{attrs:{id:"除法和取余-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#除法和取余-2"}},[s._v("#")]),s._v(" 除法和取余")])])]),s._v(" "),a("p",[s._v("计算机无法精确表示大部分的浮点数，因此浮点数的除法、取余的结果，可能会出现误差。浮点数参加的除法是不会取整的，这一点和整数不同。")]),s._v(" "),a("h3",{attrs:{id:"布尔运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔运算"}},[s._v("#")]),s._v(" 布尔运算")]),s._v(" "),a("p",[s._v("属于布尔运算的运算符有比较运算符"),a("code",[s._v(">、>=、<、<=、==、!=")]),s._v("，有逻辑运算符"),a("code",[s._v("&&、||、&、|")]),s._v("，有三元运算符"),a("code",[s._v("true?a:b")]),s._v("。其中"),a("code",[s._v("&&")]),s._v("和"),a("code",[s._v("||")]),s._v("也叫短路运算符，当左边的值可以确定结果时，就不再计算右边。")]),s._v(" "),a("h3",{attrs:{id:"运算时的转型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算时的转型"}},[s._v("#")]),s._v(" 运算时的转型")]),s._v(" "),a("p",[s._v("当低精度类型和高精度类型一起参与运算时，会将低精度自动转型为高精度，然后进行运算。")]),s._v(" "),a("p",[s._v("当把低精度类型数值赋值给高精度类型变量时，会将低精度类型自动转型为高精度。")]),s._v(" "),a("p",[s._v("当把高精度类型数值赋值给低精度类型变量时，必须进行强制转型，而且可能会损失精度。")]),s._v(" "),a("h2",{attrs:{id:"字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[s._v("#")]),s._v(" 字符串")]),s._v(" "),a("h3",{attrs:{id:"字符串的表示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串的表示"}},[s._v("#")]),s._v(" 字符串的表示")]),s._v(" "),a("p",[s._v("字符串用"),a("code",[s._v('""')]),s._v("包裹，如果字符串中包含字符"),a("code",[s._v('"')]),s._v("，就需要进行转义"),a("code",[s._v("\\")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello \\" world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// hello " world')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("还有一些特殊的转义字符：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("\\n  换行符，将光标移动到下一行\n\\r  回车符，将光标移动到当前行的行首\n\\t  制表符，对齐表格的各列\n\\b  退格符，在文本中后退一步或删除一个字符\n\\f  换页符\n\\"),a("span",{pre:!0,attrs:{class:"token char"}},[s._v("'  单引号'")]),s._v('\n\\"  双引号"\n\\\\  反斜杠\\\n\\u'),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Unicode")]),s._v("编码\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("Java中用Unicode编码表示字符("),a("code",[s._v("char")]),s._v(")，比如：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[s._v("'\\u0041'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// A")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("在字符串中也可以用Unicode编码来表示字符：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\u0041\\u0042"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// AB")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"字符串对象的不可变性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串对象的不可变性"}},[s._v("#")]),s._v(" 字符串对象的不可变性")]),s._v(" "),a("p",[s._v("字符串对象是不可变的，字符串对象创建好之后就不能再被修改，只能改变其引用。字符串对象的不可变性是由以下三点来保证的：")]),s._v(" "),a("p",[s._v("1、"),a("code",[s._v("String")]),s._v("类内部用"),a("code",[s._v("private final char value[]")]),s._v("数组来存放字符，"),a("code",[s._v("private")]),s._v("对外部隐藏了数组，"),a("code",[s._v("final")]),s._v("保证了数组的引用不会被修改。但这还不够，数组仍有可能在"),a("code",[s._v("String")]),s._v("类内部被修改。")]),s._v(" "),a("p",[s._v("2、"),a("code",[s._v("String")]),s._v("类内部的所有方法，都不能修改数组元素。")]),s._v(" "),a("p",[s._v("3、"),a("code",[s._v("String")]),s._v("类被"),a("code",[s._v("final")]),s._v("修饰，不能被继承。")]),s._v(" "),a("h3",{attrs:{id:"字符串常量池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串常量池"}},[s._v("#")]),s._v(" 字符串常量池")]),s._v(" "),a("ul",[a("li",[a("h4",{attrs:{id:"字符串常量池的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串常量池的作用"}},[s._v("#")]),s._v(" 字符串常量池的作用")])])]),s._v(" "),a("p",[s._v("在运行时常量池中，存在一个字符串常量池，用来存放字符串常量。字符串常量池是一个哈希表，因此里面的字符串对象不会重复。字符串常量池的作用是节省内存空间。")]),s._v(" "),a("p",[s._v("观察下面的代码：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v('s1和s2指向同一个"ab"对象，原因是当第一次创建"ab"对象时，由于这个对象不可能被修改，因此它是一个常量，会被放进字符串常量池中，当第二次创建"ab"对象时，由于这个对象还是一个常量，因此会先去字符串常量池中去寻找是否有相同的常量，如果有就返回这个常量，如果没有就创建新的对象，然后放进字符串常量池。')]),s._v(" "),a("ul",[a("li",[a("h4",{attrs:{id:"字符串拼接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串拼接"}},[s._v("#")]),s._v(" 字符串拼接")])])]),s._v(" "),a("p",[s._v("字符串拼接的方式包括变量拼接和常量拼接。")]),s._v(" "),a("p",[s._v("对变量进行拼接时(包括变量和常量进行拼接)，会先创建"),a("code",[s._v("StringBuilder")]),s._v("对象，然后调用它的"),a("code",[s._v("append()")]),s._v("方法进行拼接，最后调用它的"),a("code",[s._v("toString()")]),s._v("方法创建一个新的字符串对象并返回。也就是说，变量拼接后的结果永远是新的对象。")]),s._v(" "),a("p",[s._v("对常量进行拼接时，由于常量在运行期是不会改变的，那么常量拼接的结果在运行期自然也是确定的、不会改变的，因此编译器索性就承担了常量拼接的工作，也就是说常量拼接是在编译期完成的，"),a("code",[s._v('String s = "a"+"b"')]),s._v("编译成字节码后就变成了"),a("code",[s._v('String s = "ab"')]),s._v("。。")]),s._v(" "),a("p",[s._v("观察下面的代码：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s5 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" s4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//true，原因是"ab"已经在字符串常量池中存在了')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" s5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//false，原因是变量拼接后的结果永远是新对象")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ul",[a("li",[a("h4",{attrs:{id:"intern-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#intern-方法"}},[s._v("#")]),s._v(" intern()方法")])])]),s._v(" "),a("p",[a("code",[s._v("intern()")]),s._v("方法的作用是，主动尝试将字符串对象放入字符串常量池，如果字符串常量池中已经存在相同字符串了，那么就返回字符串常量池中的字符串对象，如果不存在，就把对象放入常量池，然后返回该对象。")]),s._v(" "),a("p",[s._v("观察下面的代码：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("intern")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//发现字符串常量池中没有"ab"对象，就将"ab"对象放入字符串常量池，并返回该对象')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s5 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//发现字符串常量池中已经有"ab"对象了，所以直接返回该对象')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" s4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" s5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("blockquote",[a("p",[s._v("注：以上特性适用于JDK8，其它版本的JDK可能会有不同。")])]),s._v(" "),a("h2",{attrs:{id:"流程控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流程控制"}},[s._v("#")]),s._v(" 流程控制")]),s._v(" "),a("h3",{attrs:{id:"while和do-while循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#while和do-while循环"}},[s._v("#")]),s._v(" while和do...while循环")]),s._v(" "),a("p",[s._v("while是先判断，再循环；do...while是先执行一次循环，再判断，再循环。")]),s._v(" "),a("h3",{attrs:{id:"for循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for循环"}},[s._v("#")]),s._v(" for循环")]),s._v(" "),a("p",[s._v("for循环的语法是：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("初始条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" 循环检测条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" 循环后更新计数器"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("执行过程是，先执行初始条件，再检测循环条件，然后执行循环体，执行完后更新计数器，再检测循环条件，不断循环，直到不满足循环条件后退出。")]),s._v(" "),a("p",[s._v("初始条件、循环条件、计数器都可以省略，视具体情况而定。")]),s._v(" "),a("h3",{attrs:{id:"break、continue、return中断循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#break、continue、return中断循环"}},[s._v("#")]),s._v(" break、continue、return中断循环")]),s._v(" "),a("p",[s._v("break直接跳出循环；continue终止本次循环，开始执行下一次循环；return直接结束方法。")]),s._v(" "),a("h3",{attrs:{id:"switch-case分支语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#switch-case分支语句"}},[s._v("#")]),s._v(" switch...case分支语句")]),s._v(" "),a("p",[s._v("switch...case的语法是：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"c"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"default"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[a("code",[s._v("switch()")]),s._v("中的变量必须是"),a("code",[s._v("byte、short、char、int")]),s._v("类型、它们的包装类型、String类型、Enum类型。")]),s._v(" "),a("p",[s._v("如果缺少了"),a("code",[s._v("break")]),s._v("，程序会继续往下执行，直到遇见"),a("code",[s._v("break")]),s._v("。")])])}),[],!1,null,null,null);a.default=e.exports}}]);