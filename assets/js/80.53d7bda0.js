(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{417:function(t,a,e){"use strict";e.r(a);var s=e(4),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"一、初识索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、初识索引"}},[t._v("#")]),t._v(" 一、初识索引")]),t._v(" "),a("p",[t._v("这是数据库中的一张表t_student：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("id")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("name")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("age")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("jack")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("18")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("tom")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("19")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("rose")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("20")])])])]),t._v(" "),a("p",[t._v("现在有这样一条SQL语句：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" t_student "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("怎样才能提高这条SQL的查询效率呢？由于同一条记录的id、name、age是绑定在一起的，只要找到了id就能取到对应的name、age，因此关键在于id的查找。为了提高查找的效率，我们可以使用各种查找算法，比如二分法查找、二叉排序树查找、B树查找、B+树查找等等，这些查找算法都对应着特定的数据结构，例如二分法查找就要求元素有序。事实上，MySQL数据库就是通过B+树实现索引的，"),a("strong",[t._v("因此，我们所说的给数据库字段加索引，意思就是按照某种数据结构重新排列字段元素，以便使用对应的查找算法，提高查询速度")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"二、索引的数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、索引的数据结构"}},[t._v("#")]),t._v(" 二、索引的数据结构")]),t._v(" "),a("p",[t._v("现在以B+树为例，介绍一下索引的数据结构。")]),t._v(" "),a("ul",[a("li",[a("h3",{attrs:{id:"b树与b-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b树与b-树"}},[t._v("#")]),t._v(" B树与B+树")])])]),t._v(" "),a("p",[t._v("先复习几个概念：")]),t._v(" "),a("p",[t._v("1、二叉排序树：这种树的每个结点中只有一个元素，一个元素最多有左右两个子结点，并且左结点中的元素小于父结点元素，右结点中的元素大于父结点元素。")]),t._v(" "),a("p",[t._v("2、多路查找树：多路查找树类似于二叉排序树，不同的是每个结点中有多个元素。")]),t._v(" "),a("p",[t._v("3、B树：B树是一种平衡的多路查找树。")]),t._v(" "),a("p",[t._v("现在重点来了，什么是B+树？B+树和B树很像，都是一种平衡的多路查找树，它们的区别在于，当结点中的元素是key-value类型时，B树所有结点中的元素都是key-value类型，而B+树只有叶子结点中的元素是key-value类型，其余元素都是key类型。换一种角度形容就是，"),a("strong",[t._v("B树中的数据均匀分布在每个结点上，而B+树中的数据只分布在叶子结点上，其它结点相当于存放着指向数据的指针")]),t._v("。")]),t._v(" "),a("ul",[a("li",[a("h3",{attrs:{id:"磁盘io与预读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#磁盘io与预读"}},[t._v("#")]),t._v(" 磁盘IO与预读")])])]),t._v(" "),a("p",[t._v("为什么MySQL使用B+树实现索引，而不是其它数据结构呢？这涉及到磁盘的IO操作。数据保存在磁盘上，但是由于读取磁盘是一个相当耗时的过程，所以我们可以将大量数据一次性读取到内存中(预读)，然后在内存中对数据进行操作，这样就避免了对磁盘频繁的读取。")]),t._v(" "),a("p",[t._v("很显然，二分法查找、二叉排序树这两种数据结构要求频繁地读取磁盘，但每次读取的数据量又很少，造成了资源的浪费。B树和B+树弥补了这个缺点，"),a("strong",[t._v("并且B+树相比于B树，在每次读取的数据量大小相同的情况下，B+树读取磁盘的总次数更少")]),t._v("，原因是B+树的value只保存在叶子结点，非叶子结点中的空间被更多的key所占用，这样就降低了树的高度，从而减少了磁盘的读取次数。这就是MySQL使用B+树实现索引的原因。")]),t._v(" "),a("p",[t._v("B+树的查找过程如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/myblog/img/java/B+%E6%A0%91.png",alt:"B+树"}})]),t._v(" "),a("p",[t._v("图中黄色代表磁盘块，绿色代表key，蓝色代表value，红色代表指针。当我们要查询key=15所对应的value时，过程如下：")]),t._v(" "),a("p",[t._v("1、将磁盘块1加载到内存，此时发生第一次IO；")]),t._v(" "),a("p",[t._v("2、在内存中通过二分法确定15在17左边，通过指针中的地址找到磁盘块2，将其加载到内存中，此时发生第二次IO；")]),t._v(" "),a("p",[t._v("3、在内存中通过二分法确定15在10右边，通过指针中的地址找到磁盘块7，将其加载到内存中，此时发生第三次IO；")]),t._v(" "),a("p",[t._v("4、在内存中通过二分法找到15对应的value是tom。")]),t._v(" "),a("h2",{attrs:{id:"三、聚集索引与非聚集索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、聚集索引与非聚集索引"}},[t._v("#")]),t._v(" 三、聚集索引与非聚集索引")]),t._v(" "),a("p",[t._v("MySQL常见的数据引擎有"),a("code",[t._v("Innodb")]),t._v("(默认)和"),a("code",[t._v("Myisam")]),t._v("，"),a("code",[t._v("Innodb")]),t._v("使用聚集索引，"),a("code",[t._v("Myisam")]),t._v("使用非聚集索引，聚集索引和非聚集索引的区别在于组织方式不同。")]),t._v(" "),a("ul",[a("li",[a("h3",{attrs:{id:"聚集索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聚集索引"}},[t._v("#")]),t._v(" 聚集索引")])])]),t._v(" "),a("p",[a("code",[t._v("Innodb")]),t._v("使用聚集索引，"),a("strong",[t._v("索引树与数据在同一个文件中")]),t._v("。当创建表时，"),a("code",[t._v("Innodb")]),t._v("会将主键作为key建立索引树，如果没有指定主键，会将第一个非空的唯一索引作为key建立索引树，如果没有唯一索引，"),a("code",[t._v("Innodb")]),t._v("会自动帮我们生成一列自增的row_id作为key来建立索引树，这棵索引树叫做"),a("strong",[t._v("主索引树，它的叶子结点上存放着数据")]),t._v("。"),a("strong",[t._v("由于自动生成的row_id性能不好，因此最好在创建表的时候就指定一列主键")]),t._v("。"),a("strong",[t._v("当我们通过主键索引查询数据时，可以直接在主索引树的叶子结点上取到值")]),t._v("。")]),t._v(" "),a("p",[t._v("当我们给非主键字段添加索引时(即普通索引)，也会以该字段作为key建立一棵索引树，叫做辅助索引树，它和主索引树的区别是，辅助索引树的叶子结点存放的不是数据，而是主键。"),a("strong",[t._v("当通过普通索引查询数据时，会首先去辅助索引树中查找该字段对应的主键，然后用主键去主索引树中查找数据，这个过程叫做回表")]),t._v("。")]),t._v(" "),a("p",[t._v("聚集索引如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/myblog/img/java/%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95.jpg",alt:"聚集索引"}})]),t._v(" "),a("ul",[a("li",[a("h3",{attrs:{id:"非聚集索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非聚集索引"}},[t._v("#")]),t._v(" 非聚集索引")])])]),t._v(" "),a("p",[a("code",[t._v("Myisam")]),t._v("使用非聚集索引，"),a("strong",[t._v("索引树与数据在不同的文件中")]),t._v("。当创建表时，也会将主键作为key建立主索引树，但是和聚集索引不同的是，"),a("strong",[t._v("叶子结点存放的不是数据，而是数据的物理地址")]),t._v("，真正的数据在另一个文件中。当添加普通索引时，辅助索引树的叶子结点存放的也是数据物理地址。")]),t._v(" "),a("p",[t._v("非聚集索引如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/myblog/img/java/%E9%9D%9E%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95.jpg",alt:"非聚集索引"}})]),t._v(" "),a("p",[a("strong",[t._v("由于"),a("code",[t._v("Myisam")]),t._v("没有回表操作，所以相比于"),a("code",[t._v("Innodb")]),t._v("查询速度更快，但缺点是不支持事务，所以一般来说"),a("code",[t._v("Innodb")]),t._v("更常用")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"四、联合索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、联合索引"}},[t._v("#")]),t._v(" 四、联合索引")]),t._v(" "),a("ul",[a("li",[a("h3",{attrs:{id:"最左前缀匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最左前缀匹配"}},[t._v("#")]),t._v(" 最左前缀匹配")])])]),t._v(" "),a("p",[t._v("两个或两个以上字段上的索引叫做联合索引，联合索引遵守"),a("strong",[t._v("最左前缀匹配规则")]),t._v("：当建立联合索引时，索引树中的key包含多个字段，并且字段的优先级从左往右依次降低，当使用联合索引查询数据时，从第一个字段开始、从左向右依次进行匹配。举个例子，当我们建立一个联合索引"),a("code",[t._v("(id, name, age)")]),t._v("时，在索引树中，只有在相同的id下，name才是有序的，只有在相同的id和name下，age才是有序的，如果id是唯一的，那么name和age索引就没有存在的意义，因为通过id就可以唯一确定一条记录，同样的道理，如果id和name是唯一的，那么age索引就没有存在的意义。")]),t._v(" "),a("blockquote",[a("p",[t._v("我们通过联合索引查询数据时，如果查询条件中的字段顺序和索引定义中的字段顺序不一致，不影响索引的使用，因为MySQL查询优化器会帮我们修改字段顺序，让查询效率变得最高。")])]),t._v(" "),a("ul",[a("li",[a("h3",{attrs:{id:"联合索引失效场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联合索引失效场景"}},[t._v("#")]),t._v(" 联合索引失效场景")])])]),t._v(" "),a("p",[t._v("1、"),a("strong",[t._v("违反最左前缀匹配规则")])]),t._v(" "),a("p",[t._v("假设建立了联合索引"),a("code",[t._v("(a, b ,c)")]),t._v("，如果查询条件中跳过了前面的字段，则后面的字段索引会失效，比如：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" my_table "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查询不会走任何索引")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" my_table "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查询只会走a索引，b索引失效")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("2、查询的时候，如果在查询条件中在索引列上做任何"),a("strong",[t._v("计算、函数、类型转换操作")]),t._v("，都会导致索引失效。")]),t._v(" "),a("p",[a("font",{attrs:{color:"red"}},[t._v("3、查询的时候，查询条件中如果有范围条件(>、<、between and等)，右边的索引会失效。该场景存疑，因为我测试时发现，在某些情况下索引并未失效。")])],1),t._v(" "),a("p",[t._v("4、查询的时候，查询条件中使用"),a("strong",[t._v("不等于符号(!=、<>)")]),t._v("，会导致索引失效。")]),t._v(" "),a("p",[t._v("5、查询的时候，查询条件中使用"),a("strong",[t._v("模糊前缀匹配("),a("code",[t._v("'%bc'")]),t._v(")")]),t._v("，会导致索引失效，模糊中缀("),a("code",[t._v("'a%c'")]),t._v(")和模糊后缀("),a("code",[t._v("'ab%'")]),t._v(")匹配时索引不会失效。")]),t._v(" "),a("p",[t._v("6、查询的时候，查询条件中使用**"),a("code",[t._v("or")]),t._v("连接**不同的字段，会导致索引失效，比如：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" my_table "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查询不会走任何索引")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("这种情况下要为每个字段单独添加索引。")]),t._v(" "),a("p"),t._v(" "),a("p",[t._v("索引失效场景并不是绝对的，在实际操作中，需要使用explain命令来对具体的SQL语句进行分析：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("explain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" my_table "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[a("h3",{attrs:{id:"联合索引使用原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联合索引使用原则"}},[t._v("#")]),t._v(" 联合索引使用原则")])])]),t._v(" "),a("p",[t._v("MySQL联合索引的使用原则有：")]),t._v(" "),a("p",[t._v("1、"),a("strong",[t._v("避免索引失效")]),t._v("；")]),t._v(" "),a("p",[t._v("2、"),a("strong",[t._v("尽量将过滤能力最强的字段放在联合索引的最左边")]),t._v("，因为一旦通过该字段查到唯一记录，就不需要再去走其它索引了。一个字段在表中的不重复度越高，则它的过滤能力越强；")]),t._v(" "),a("p",[t._v("3、多个字段过滤能力相同的情况下，"),a("strong",[t._v("应该将长度最短的字段放在最左边")]),t._v("，这样可以增大每个磁盘块中key的数量，降低索引树的高度，减少磁盘IO的次数；")]),t._v(" "),a("p",[t._v("4、"),a("strong",[t._v("如果一个字段的查询频率很高")]),t._v("，应该优先将它放在联合索引的最左边；")]),t._v(" "),a("p",[t._v("5、"),a("strong",[t._v("更新非常频繁的字段不适合添加索引")]),t._v("，因为索引树会频繁调整，影响性能；")]),t._v(" "),a("p",[t._v("6、"),a("strong",[t._v("尽量使用覆盖索引")]),t._v("。覆盖索引指的是非主键索引中包含了要查询的所有字段，不需要进行回表操作就可以查到数据。")]),t._v(" "),a("p"),t._v(" "),a("p",[t._v("本文参考：")]),t._v(" "),a("p",[t._v("1、"),a("a",{attrs:{href:"https://tech.meituan.com/2014/06/30/mysql-index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL索引原理及慢查询优化"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("2、"),a("a",{attrs:{href:"https://blog.codinglabs.org/articles/theory-of-mysql-index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL索引背后的数据结构及算法原理"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("3、"),a("a",{attrs:{href:"https://www.cnblogs.com/yrxing/p/14557150.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("搞懂Mysql索引原理及应用，这一篇就够了！"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("4、"),a("a",{attrs:{href:"https://www.cnblogs.com/xuwc/p/14007766.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据库常见知识点总结-最左前缀匹配原则、EXPLAIN 命令详解"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);