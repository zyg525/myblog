(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{409:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"集合的继承结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集合的继承结构"}},[t._v("#")]),t._v(" 集合的继承结构")]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"/myblog/img/java/集合的继承结构.png",alt:"集合的继承结构"}}),t._v(" "),s("h2",{attrs:{id:"list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" List")]),t._v(" "),s("h3",{attrs:{id:"特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),s("p",[s("code",[t._v("List")]),t._v("是一个接口，它和数组的特点一样，每个元素都有索引。它相比于数组的优点是，数组在增删元素时很麻烦，因为要手动移动元素，而"),s("code",[t._v("List")]),t._v("将增删操作封装到了方法中，更方便使用。")]),t._v(" "),s("p",[s("code",[t._v("List")]),t._v("的实现类包括"),s("code",[t._v("ArrayList")]),t._v("和"),s("code",[t._v("LinkedList")]),t._v("，"),s("strong",[s("code",[t._v("ArrayList")]),t._v("底层用数组存储元素，因此查找、修改元素比较快；"),s("code",[t._v("LinkedList")]),t._v("底层用链表存储元素，因此添加、删除元素比较快。")])]),t._v(" "),s("h3",{attrs:{id:"常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用方法"}},[t._v("#")]),t._v(" 常用方法")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("作用")]),t._v(" "),s("th",[t._v("例子")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("boolean add(E e)")])]),t._v(" "),s("td",[t._v("向"),s("code",[t._v("List")]),t._v("的末尾添加元素")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("boolean add(int index, E e)")])]),t._v(" "),s("td",[t._v("向"),s("code",[t._v("List")]),t._v("的指定位置添加元素，后面的元素往后移动一位")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("E get(int index)")])]),t._v(" "),s("td",[t._v("获取指定位置的元素")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("int size()")])]),t._v(" "),s("td",[t._v("获取"),s("code",[t._v("List")]),t._v("中元素的个数")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("E set(int index, E e)")])]),t._v(" "),s("td",[t._v("修改"),s("code",[t._v("List")]),t._v("中指定位置的元素，并返回旧元素")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("E remove(int index)")])]),t._v(" "),s("td",[t._v("删除"),s("code",[t._v("List")]),t._v("中指定位置的元素，并返回旧元素")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("T[] toArray(T[] array)")])]),t._v(" "),s("td",[t._v("将"),s("code",[t._v("List")]),t._v("转换为数组，数组长度最好和"),s("code",[t._v("List")]),t._v("相同，这样能提高效率")]),t._v(" "),s("td",[s("code",[t._v("String[] array = list.toArray(new String[3]);")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("List Arrays.asList(T ... a)")])]),t._v(" "),s("td",[t._v("（版本<"),s("code",[t._v("JDK11")]),t._v("）将数组转换为"),s("code",[t._v("List")]),t._v("，注意这里返回的是另一个内部类"),s("code",[t._v("ArrayList")]),t._v("对象，这个对象不能增删，只能读改")]),t._v(" "),s("td",[s("code",[t._v('List<String> list = Arrays.asList(new String[]{"a","b","c"});')])])])])]),t._v(" "),s("h3",{attrs:{id:"遍历list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历list"}},[t._v("#")]),t._v(" 遍历List")]),t._v(" "),s("p",[t._v("在遍历"),s("code",[t._v("List")]),t._v("元素时，可以使用最基本的"),s("code",[t._v("for")]),t._v("循环进行遍历，但效率可能不高，"),s("strong",[t._v("最好的遍历方法是使用"),s("code",[t._v("List")]),t._v("中自带的迭代器"),s("code",[t._v("Iterator")])]),t._v("，它是"),s("code",[t._v("List")]),t._v("的内部类，其中定义了一些遍历元素的方法，这些方法的效率很高。下面是使用"),s("code",[t._v("Iterator")]),t._v("遍历集合元素的一个例子：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" iterator "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iterator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" iterator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("更简单的写法是：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("上面的两种写法本质上是一样的，编译器自动将第二种写法转换成了第一种写法。")]),t._v(" "),s("p",[t._v("如果集合中定义了"),s("code",[t._v("forEach()")]),t._v("方法，也可以用这个方法进行遍历，"),s("code",[t._v("forEach()")]),t._v("方法的内部使用了第二种写法：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h2",{attrs:{id:"map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" Map")]),t._v(" "),s("h3",{attrs:{id:"特点-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点-2"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),s("p",[s("code",[t._v("Map")]),t._v("是一个接口，它是一种键值映射表，主要实现类是"),s("code",[t._v("HashMap")]),t._v("，除此之外还有"),s("code",[t._v("EnumMap")]),t._v("、"),s("code",[t._v("TreeMap")]),t._v("、"),s("code",[t._v("Hashtable")]),t._v("等。")]),t._v(" "),s("p",[s("code",[t._v("Map")]),t._v("的常用方法有：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("作用")]),t._v(" "),s("th",[t._v("例子")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("V put(K key, V value)")])]),t._v(" "),s("td",[t._v("添加或更新键值对，返回旧value")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("V get(Object key)")])]),t._v(" "),s("td",[t._v("获取指定key对应的value")]),t._v(" "),s("td")])])]),t._v(" "),s("h3",{attrs:{id:"hashmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[t._v("#")]),t._v(" HashMap")]),t._v(" "),s("ul",[s("li",[s("h4",{attrs:{id:"原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")])])]),t._v(" "),s("p",[s("code",[t._v("HashMap")]),t._v("采用哈希表的数据结构存放键值对，具体的做法是："),s("strong",[t._v("每个"),s("code",[t._v("HashMap")]),t._v("对象都持有一个"),s("code",[t._v("Node<K, V>")]),t._v("数组，用来存放键值对，当添加键值对时，会先计算出key的哈希值，然后将key和value封装到一个"),s("code",[t._v("Node")]),t._v("对象中，最后将"),s("code",[t._v("Node")]),t._v("对象放进"),s("code",[t._v("Node")]),t._v("数组中索引为key的哈希值的位置。")])]),t._v(" "),s("p",[t._v("因此"),s("code",[t._v("HashMap")]),t._v("具有以下特点：")]),t._v(" "),s("p",[t._v("1、不能出现两个相同的key；")]),t._v(" "),s("p",[t._v("2、键值对是无序的。")]),t._v(" "),s("ul",[s("li",[s("h4",{attrs:{id:"hashcode-和equals"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashcode-和equals"}},[t._v("#")]),t._v(" hashCode()和equals()")])])]),t._v(" "),s("p",[s("code",[t._v("HashMap")]),t._v("中的key所属类型，必须正确重写"),s("code",[t._v("hashCode()")]),t._v("方法和"),s("code",[t._v("equals()")]),t._v("方法。")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("hashCode()")]),t._v("方法的作用是计算key的哈希值，从而确定键值对在数组中的位置")]),t._v("。一个正确的"),s("code",[t._v("hashCode()")]),t._v("方法应满足：")]),t._v(" "),s("p",[t._v("1、保证相同key所生成的哈希值相同；")]),t._v(" "),s("p",[t._v("2、尽量使不同key所生成的哈希值不同，降低哈希碰撞的概率，同时让哈希值均匀分布。")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("equals()")]),t._v("方法的作用是比较key是否相同，比如在更新键值对或者取出键值对时，都需要保证传入的key和键值对中的key相同")]),t._v("。仅凭哈希值或者地址，无法比较两个key是否相同。")]),t._v(" "),s("ul",[s("li",[s("h4",{attrs:{id:"数组扩容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组扩容"}},[t._v("#")]),t._v(" 数组扩容")])])]),t._v(" "),s("p",[s("code",[t._v("HashMap")]),t._v("内部的"),s("code",[t._v("Node<K, V>")]),t._v("数组初始长度是16，每次扩容一倍。扩容时会导致已有的键值对重新分布，因此频繁的扩容会影响性能。因此最好在创建"),s("code",[t._v("HashMap")]),t._v("对象时就确定好初始容量：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" map "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("由于"),s("code",[t._v("Node")]),t._v("数组的长度总是2的倍数，因此上面代码中map的实际容量是32，而非20。")]),t._v(" "),s("h3",{attrs:{id:"遍历map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历map"}},[t._v("#")]),t._v(" 遍历Map")]),t._v(" "),s("p",[s("code",[t._v("Map")]),t._v("接口中有两个方法"),s("code",[t._v("keySet()")]),t._v("和"),s("code",[t._v("entrySet()")]),t._v("，它们可以用来遍历Map。")]),t._v(" "),s("p",[s("code",[t._v("keySet()")]),t._v("的作用是获取包含所有key的Set集合：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" set "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("keySet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[s("code",[t._v("entrySet()")]),t._v("的作用是获取包含所有key-value对的Set集合：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Entry")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" entries "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("entrySet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Entry")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" kv "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" entries"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" kv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" kv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h3",{attrs:{id:"其它map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其它map"}},[t._v("#")]),t._v(" 其它Map")]),t._v(" "),s("ul",[s("li",[s("h4",{attrs:{id:"enummap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#enummap"}},[t._v("#")]),t._v(" EnumMap")])])]),t._v(" "),s("p",[t._v("如果key是Enum类型，那么可以使用Java集合库提供的一种"),s("code",[t._v("EnumMap")]),t._v("，它在内部以一个非常紧凑的数组存储value，并且根据Enum类型的key直接定位到内部数组的索引，并不需要计算哈希值，不但效率最高，而且没有额外的空间浪费。")]),t._v(" "),s("ul",[s("li",[s("h4",{attrs:{id:"treemap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#treemap"}},[t._v("#")]),t._v(" TreeMap")])])]),t._v(" "),s("p",[s("code",[t._v("TreeMap")]),t._v("采用树形结构存储键值对，因此它不要求key所属类型重写"),s("code",[t._v("hashCode()")]),t._v("方法。"),s("code",[t._v("TreeMap")]),t._v("会默认对key进行排序，前提是"),s("code",[t._v("key")]),t._v("所属类型要正确重写"),s("code",[t._v("compareTo()")]),t._v("方法。")]),t._v(" "),s("p",[t._v("我们也可以在创建"),s("code",[t._v("TreeMap")]),t._v("对象时传入一个"),s("code",[t._v("Comparator")]),t._v("函数，用这个函数中的逻辑进行比较、排序：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" map "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" k2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" k2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareTo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 降序排序")]),t._v("\nmap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("在调用"),s("code",[t._v("get()")]),t._v("方法时，也是用"),s("code",[t._v("compareTo()")]),t._v("方法或者"),s("code",[t._v("compare()")]),t._v("方法来比较key的，而不是"),s("code",[t._v("equals()")]),t._v("方法，因此要保证这两个方法的逻辑正确。")]),t._v(" "),s("h2",{attrs:{id:"set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" Set")]),t._v(" "),s("h3",{attrs:{id:"特点-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点-3"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),s("p",[t._v("Set是一个接口，用于存储不重复的元素集合，相当于存储Map中的key。")]),t._v(" "),s("p",[t._v("Set的实现类主要有"),s("code",[t._v("HashSet")]),t._v("、"),s("code",[t._v("TreeSet")]),t._v("，它们的底层是通过"),s("code",[t._v("HashMap")]),t._v("、"),s("code",[t._v("TreeMap")]),t._v("实现的。比如"),s("code",[t._v("HashSet")]),t._v("的"),s("code",[t._v("add()")]),t._v("方法是这样的：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// map的类型是HashMap，PRESENT是一个简单的Object对象")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PRESENT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("由于Set底层是通过Map实现的，因此"),s("code",[t._v("HashSet")]),t._v("也要正确重写"),s("code",[t._v("hashCode()")]),t._v("和"),s("code",[t._v("equals()")]),t._v("方法，"),s("code",[t._v("TreeSet")]),t._v("也要正确重写"),s("code",[t._v("compareTo()")]),t._v("方法。")]),t._v(" "),s("h3",{attrs:{id:"常用方法-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用方法-2"}},[t._v("#")]),t._v(" 常用方法")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("作用")]),t._v(" "),s("th",[t._v("例子")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("boolean add(E e)")])]),t._v(" "),s("td",[t._v("添加元素")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("boolean remove(Object e)")])]),t._v(" "),s("td",[t._v("删除元素")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("boolean contains(Object e)")])]),t._v(" "),s("td",[t._v("判断是否包含某个元素")]),t._v(" "),s("td")])])]),t._v(" "),s("h2",{attrs:{id:"queue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[t._v("#")]),t._v(" Queue")]),t._v(" "),s("h3",{attrs:{id:"普通队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#普通队列"}},[t._v("#")]),t._v(" 普通队列")]),t._v(" "),s("ul",[s("li",[s("h4",{attrs:{id:"特点-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点-4"}},[t._v("#")]),t._v(" 特点")])])]),t._v(" "),s("p",[t._v("Queue实际上是实现了一个先进先出（"),s("code",[t._v("FIFO：First In First Out")]),t._v("）的有序表。它和List的区别在于，List可以在任意位置添加、获取、删除元素，而Queue只能在一端添加，在另一端获取和删除。")]),t._v(" "),s("p",[s("code",[t._v("Queue")]),t._v("是一个接口，它的一个实现类是"),s("code",[t._v("LinkedList")]),t._v("，当通过"),s("code",[t._v("Queue")]),t._v("引用它时，它就是一个普通队列：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Queue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" queue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ul",[s("li",[s("h4",{attrs:{id:"常用方法-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用方法-3"}},[t._v("#")]),t._v(" 常用方法")])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("作用")]),t._v(" "),s("th",[t._v("例子")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("int size()")])]),t._v(" "),s("td",[t._v("获取队列长度")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("boolean add(E e)")])]),t._v(" "),s("td",[t._v("向队尾添加元素")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("boolean offer(E e)")])]),t._v(" "),s("td",[t._v("向队尾添加元素，和"),s("code",[t._v("add()")]),t._v("方法没有区别")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("E remove()")])]),t._v(" "),s("td",[t._v("返回并删除队首元素，如果队首元素为null，则抛出异常")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("E poll()")])]),t._v(" "),s("td",[t._v("返回并删除队首元素，如果队首元素为null，则返回null")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("E element()")])]),t._v(" "),s("td",[t._v("返回但不删除队首元素，如果队首元素为null，则抛出异常")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("E peek()")])]),t._v(" "),s("td",[t._v("返回但不删除队首元素，如果队首元素为null，则返回null")]),t._v(" "),s("td")])])]),t._v(" "),s("h3",{attrs:{id:"双端队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双端队列"}},[t._v("#")]),t._v(" 双端队列")]),t._v(" "),s("ul",[s("li",[s("h4",{attrs:{id:"特点-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点-5"}},[t._v("#")]),t._v(" 特点")])])]),t._v(" "),s("p",[t._v("双端队列允许在队列的两端添加、获取、删除元素。")]),t._v(" "),s("p",[s("code",[t._v("Deque")]),t._v("是一个接口，它继承了"),s("code",[t._v("Queue")]),t._v("，它的实现类有"),s("code",[t._v("ArrayDeque")]),t._v("和"),s("code",[t._v("LinkedList")]),t._v("，前者通过数组实现，后者通过链表实现。")]),t._v(" "),s("ul",[s("li",[s("h4",{attrs:{id:"常用方法-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用方法-4"}},[t._v("#")]),t._v(" 常用方法")])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("作用")]),t._v(" "),s("th",[t._v("例子")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("void addFirst(E e) / void offerFirst(E e)")])]),t._v(" "),s("td",[t._v("向队首添加元素，"),s("code",[t._v("add")]),t._v("和"),s("code",[t._v("offer")]),t._v("没有区别")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("void addLast(E e) / void offerLast(E e)")])]),t._v(" "),s("td",[t._v("向队尾添加元素")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("E removeFirst()")])]),t._v(" "),s("td",[t._v("返回并删除队首元素，如果队首元素为null，则抛出异常")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("E pollFirst()")])]),t._v(" "),s("td",[t._v("返回并删除队首元素，如果队首元素为null，则返回null")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("E removeLast()")])]),t._v(" "),s("td",[t._v("返回并删除队尾元素，如果队尾元素为null，则抛出异常")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("E pollLast()")])]),t._v(" "),s("td",[t._v("返回并删除队尾元素，如果队尾元素为null，则返回null")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("E getFirst()")])]),t._v(" "),s("td",[t._v("返回但不删除队首元素，如果队首元素为null，则抛出异常")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("E peekFirst()")])]),t._v(" "),s("td",[t._v("返回但不删除队首元素，如果队首元素为null，则返回null")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("E getLast()")])]),t._v(" "),s("td",[t._v("返回但不删除队尾元素，如果队尾元素为null，则抛出异常")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("E peekLast()")])]),t._v(" "),s("td",[t._v("返回但不删除队尾元素，如果队尾元素为null，则返回null")]),t._v(" "),s("td")])])]),t._v(" "),s("h3",{attrs:{id:"优先队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优先队列"}},[t._v("#")]),t._v(" 优先队列")]),t._v(" "),s("p",[t._v("PriorityQueue实现了优先队列，优先队列是一种特殊的队列，"),s("strong",[t._v("它的队尾元素一定是优先级最高的，因此可以用PriorityQueue模拟大顶堆、小顶堆")]),t._v("。普通队列的特点是先进先出，而优先队列先进不一定先出，它的出队顺序和元素的优先级有关，优先级可以由用户自定义。")]),t._v(" "),s("p",[t._v("和"),s("code",[t._v("TreeMap")]),t._v("一样，PriorityQueue中的元素必须正确实现Comparable接口：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PriorityQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" priorityQueue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PriorityQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\npriorityQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npriorityQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npriorityQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("priorityQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("peek")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认堆顶元素是最小的，即a")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("或者在创建PriorityQueue对象的时候传入"),s("code",[t._v("compare()")]),t._v("方法：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PriorityQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" priorityQueue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PriorityQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareTo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\npriorityQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npriorityQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npriorityQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("priorityQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("peek")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 堆顶元素是最大的，即c")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("h3",{attrs:{id:"栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[t._v("#")]),t._v(" 栈")]),t._v(" "),s("p",[t._v("栈的特点是先进后出，可以用"),s("code",[t._v("Stack")]),t._v("类实现栈的功能。Stack的常用方法有：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("作用")]),t._v(" "),s("th",[t._v("例子")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("E push(E e)")])]),t._v(" "),s("td",[t._v("向栈顶添加元素，并返回该元素")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("E pop()")])]),t._v(" "),s("td",[t._v("返回并删除栈顶元素")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("E peek()")])]),t._v(" "),s("td",[t._v("返回但不删除栈顶元素")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("int size()")])]),t._v(" "),s("td",[t._v("获取栈中元素的数量")]),t._v(" "),s("td")])])]),t._v(" "),s("p",[t._v("Stack是一个遗留类，它的功能完全可以用Deque实现，Deque提供了和Stack同名的方法：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Deque")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" stack "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nstack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// c")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("peek")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("h2",{attrs:{id:"collections工具类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#collections工具类"}},[t._v("#")]),t._v(" Collections工具类")]),t._v(" "),s("p",[t._v("Collections是JDK提供的工具类，同样位于"),s("code",[t._v("java.util")]),t._v("包中。它提供了一系列静态方法，能更方便地操作各种集合。")]),t._v(" "),s("p",[t._v("Collections中的常用静态方法有：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("作用")]),t._v(" "),s("th",[t._v("例子")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("boolean addAll(Collection<? super T> c, T... elements)")])]),t._v(" "),s("td",[t._v("向Collection类型的集合中添加多个元素")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("List<T> emptyList() / Map<K, V> emptyMap() / Set<T> emptySet()")])]),t._v(" "),s("td",[t._v("创建空集合，并且这些集合是不可变的")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("List<T> singletonList(T o) / Map<K, V> singletonMap(K key, V value) / Set<T> singleton(T o)")])]),t._v(" "),s("td",[t._v("创建单元素集合，并且这些集合是不可变的")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("void sort(List<T> list)")])]),t._v(" "),s("td",[t._v("对List中的元素进行排序")]),t._v(" "),s("td")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);